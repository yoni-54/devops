version: '3.8'

services:
  # Node.js Application - Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: devops-app-prod
    ports:
      - '3000:3000'
    env_file:
      - .env.production
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount SSL certificates if needed
      - ${SSL_CERT_PATH:-/dev/null}:/app/certs/cert.pem:ro
      - ${SSL_KEY_PATH:-/dev/null}:/app/certs/key.pem:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: devops-nginx-prod
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - 'with-nginx' # Optional service, only runs when profile is specified

networks:
  app-network:
    driver: bridge
